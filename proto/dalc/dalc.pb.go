// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dalc/dalc.proto

package dalc

import (
	context "context"
	fmt "fmt"
	optimint "github.com/celestiaorg/dalc/proto/optimint"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StatusCode int32

const (
	StatusCode_STATUS_CODE_UNSPECIFIED StatusCode = 0
	StatusCode_STATUS_CODE_SUCCESS     StatusCode = 1
	StatusCode_STATUS_CODE_TIMEOUT     StatusCode = 2
	StatusCode_STATUS_CODE_ERROR       StatusCode = 3
)

var StatusCode_name = map[int32]string{
	0: "STATUS_CODE_UNSPECIFIED",
	1: "STATUS_CODE_SUCCESS",
	2: "STATUS_CODE_TIMEOUT",
	3: "STATUS_CODE_ERROR",
}

var StatusCode_value = map[string]int32{
	"STATUS_CODE_UNSPECIFIED": 0,
	"STATUS_CODE_SUCCESS":     1,
	"STATUS_CODE_TIMEOUT":     2,
	"STATUS_CODE_ERROR":       3,
}

func (x StatusCode) String() string {
	return proto.EnumName(StatusCode_name, int32(x))
}

func (StatusCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_45d7d8eda2693dc1, []int{0}
}

type DAResponse struct {
	Code            StatusCode `protobuf:"varint,1,opt,name=code,proto3,enum=dalc.StatusCode" json:"code,omitempty"`
	Message         string     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	DataLayerHeight uint64     `protobuf:"varint,3,opt,name=data_layer_height,json=dataLayerHeight,proto3" json:"data_layer_height,omitempty"`
}

func (m *DAResponse) Reset()         { *m = DAResponse{} }
func (m *DAResponse) String() string { return proto.CompactTextString(m) }
func (*DAResponse) ProtoMessage()    {}
func (*DAResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_45d7d8eda2693dc1, []int{0}
}
func (m *DAResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DAResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DAResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DAResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DAResponse.Merge(m, src)
}
func (m *DAResponse) XXX_Size() int {
	return m.Size()
}
func (m *DAResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DAResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DAResponse proto.InternalMessageInfo

func (m *DAResponse) GetCode() StatusCode {
	if m != nil {
		return m.Code
	}
	return StatusCode_STATUS_CODE_UNSPECIFIED
}

func (m *DAResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *DAResponse) GetDataLayerHeight() uint64 {
	if m != nil {
		return m.DataLayerHeight
	}
	return 0
}

type SubmitBlockRequest struct {
	Block *optimint.Block `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
}

func (m *SubmitBlockRequest) Reset()         { *m = SubmitBlockRequest{} }
func (m *SubmitBlockRequest) String() string { return proto.CompactTextString(m) }
func (*SubmitBlockRequest) ProtoMessage()    {}
func (*SubmitBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_45d7d8eda2693dc1, []int{1}
}
func (m *SubmitBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubmitBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubmitBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubmitBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitBlockRequest.Merge(m, src)
}
func (m *SubmitBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *SubmitBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitBlockRequest proto.InternalMessageInfo

func (m *SubmitBlockRequest) GetBlock() *optimint.Block {
	if m != nil {
		return m.Block
	}
	return nil
}

type SubmitBlockResponse struct {
	Result *DAResponse `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *SubmitBlockResponse) Reset()         { *m = SubmitBlockResponse{} }
func (m *SubmitBlockResponse) String() string { return proto.CompactTextString(m) }
func (*SubmitBlockResponse) ProtoMessage()    {}
func (*SubmitBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_45d7d8eda2693dc1, []int{2}
}
func (m *SubmitBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubmitBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubmitBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubmitBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitBlockResponse.Merge(m, src)
}
func (m *SubmitBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *SubmitBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitBlockResponse proto.InternalMessageInfo

func (m *SubmitBlockResponse) GetResult() *DAResponse {
	if m != nil {
		return m.Result
	}
	return nil
}

type CheckBlockAvailabilityRequest struct {
	Header *optimint.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (m *CheckBlockAvailabilityRequest) Reset()         { *m = CheckBlockAvailabilityRequest{} }
func (m *CheckBlockAvailabilityRequest) String() string { return proto.CompactTextString(m) }
func (*CheckBlockAvailabilityRequest) ProtoMessage()    {}
func (*CheckBlockAvailabilityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_45d7d8eda2693dc1, []int{3}
}
func (m *CheckBlockAvailabilityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckBlockAvailabilityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckBlockAvailabilityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckBlockAvailabilityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckBlockAvailabilityRequest.Merge(m, src)
}
func (m *CheckBlockAvailabilityRequest) XXX_Size() int {
	return m.Size()
}
func (m *CheckBlockAvailabilityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckBlockAvailabilityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckBlockAvailabilityRequest proto.InternalMessageInfo

func (m *CheckBlockAvailabilityRequest) GetHeader() *optimint.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

type CheckBlockAvailabilityResponse struct {
	Result        *DAResponse `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	DataAvailable bool        `protobuf:"varint,2,opt,name=data_available,json=dataAvailable,proto3" json:"data_available,omitempty"`
}

func (m *CheckBlockAvailabilityResponse) Reset()         { *m = CheckBlockAvailabilityResponse{} }
func (m *CheckBlockAvailabilityResponse) String() string { return proto.CompactTextString(m) }
func (*CheckBlockAvailabilityResponse) ProtoMessage()    {}
func (*CheckBlockAvailabilityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_45d7d8eda2693dc1, []int{4}
}
func (m *CheckBlockAvailabilityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckBlockAvailabilityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckBlockAvailabilityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckBlockAvailabilityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckBlockAvailabilityResponse.Merge(m, src)
}
func (m *CheckBlockAvailabilityResponse) XXX_Size() int {
	return m.Size()
}
func (m *CheckBlockAvailabilityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckBlockAvailabilityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckBlockAvailabilityResponse proto.InternalMessageInfo

func (m *CheckBlockAvailabilityResponse) GetResult() *DAResponse {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *CheckBlockAvailabilityResponse) GetDataAvailable() bool {
	if m != nil {
		return m.DataAvailable
	}
	return false
}

type RetrieveBlockRequest struct {
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *RetrieveBlockRequest) Reset()         { *m = RetrieveBlockRequest{} }
func (m *RetrieveBlockRequest) String() string { return proto.CompactTextString(m) }
func (*RetrieveBlockRequest) ProtoMessage()    {}
func (*RetrieveBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_45d7d8eda2693dc1, []int{5}
}
func (m *RetrieveBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveBlockRequest.Merge(m, src)
}
func (m *RetrieveBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveBlockRequest proto.InternalMessageInfo

func (m *RetrieveBlockRequest) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type RetrieveBlockResponse struct {
	Result *DAResponse       `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Blocks []*optimint.Block `protobuf:"bytes,2,rep,name=blocks,proto3" json:"blocks,omitempty"`
}

func (m *RetrieveBlockResponse) Reset()         { *m = RetrieveBlockResponse{} }
func (m *RetrieveBlockResponse) String() string { return proto.CompactTextString(m) }
func (*RetrieveBlockResponse) ProtoMessage()    {}
func (*RetrieveBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_45d7d8eda2693dc1, []int{6}
}
func (m *RetrieveBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveBlockResponse.Merge(m, src)
}
func (m *RetrieveBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveBlockResponse proto.InternalMessageInfo

func (m *RetrieveBlockResponse) GetResult() *DAResponse {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *RetrieveBlockResponse) GetBlocks() []*optimint.Block {
	if m != nil {
		return m.Blocks
	}
	return nil
}

func init() {
	proto.RegisterEnum("dalc.StatusCode", StatusCode_name, StatusCode_value)
	proto.RegisterType((*DAResponse)(nil), "dalc.DAResponse")
	proto.RegisterType((*SubmitBlockRequest)(nil), "dalc.SubmitBlockRequest")
	proto.RegisterType((*SubmitBlockResponse)(nil), "dalc.SubmitBlockResponse")
	proto.RegisterType((*CheckBlockAvailabilityRequest)(nil), "dalc.CheckBlockAvailabilityRequest")
	proto.RegisterType((*CheckBlockAvailabilityResponse)(nil), "dalc.CheckBlockAvailabilityResponse")
	proto.RegisterType((*RetrieveBlockRequest)(nil), "dalc.RetrieveBlockRequest")
	proto.RegisterType((*RetrieveBlockResponse)(nil), "dalc.RetrieveBlockResponse")
}

func init() { proto.RegisterFile("dalc/dalc.proto", fileDescriptor_45d7d8eda2693dc1) }

var fileDescriptor_45d7d8eda2693dc1 = []byte{
	// 538 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xcd, 0x6e, 0xda, 0x40,
	0x10, 0xc7, 0x31, 0xa1, 0xb4, 0x1d, 0x94, 0x40, 0x36, 0x4d, 0x70, 0x89, 0x6a, 0x21, 0x37, 0x69,
	0x51, 0x0e, 0x20, 0xd1, 0x63, 0x0f, 0x2d, 0x31, 0xae, 0x42, 0x95, 0x96, 0x6a, 0x0d, 0x97, 0x5e,
	0xd0, 0x62, 0x46, 0xb0, 0x8d, 0x89, 0x89, 0xbd, 0x46, 0xcd, 0x0b, 0xf4, 0xdc, 0xc7, 0xea, 0x31,
	0xc7, 0x1e, 0x2b, 0x78, 0x91, 0xca, 0x6b, 0x9b, 0x40, 0xea, 0x46, 0xca, 0xc5, 0x9a, 0x9d, 0xdf,
	0xce, 0xf8, 0x3f, 0x1f, 0x5a, 0x28, 0x8e, 0x98, 0x63, 0x37, 0xc2, 0x4f, 0x7d, 0xe6, 0xb9, 0xc2,
	0x25, 0xb9, 0xd0, 0xae, 0x94, 0xdd, 0x99, 0xe0, 0x53, 0x7e, 0x29, 0x1a, 0x89, 0x11, 0x61, 0xfd,
	0x3b, 0x40, 0xbb, 0x45, 0xd1, 0x9f, 0xb9, 0x97, 0x3e, 0x92, 0x23, 0xc8, 0xd9, 0xee, 0x08, 0x55,
	0xa5, 0xaa, 0xd4, 0x76, 0x9a, 0xa5, 0xba, 0xcc, 0x63, 0x09, 0x26, 0x02, 0xdf, 0x70, 0x47, 0x48,
	0x25, 0x25, 0x2a, 0x3c, 0x9e, 0xa2, 0xef, 0xb3, 0x31, 0xaa, 0xd9, 0xaa, 0x52, 0x7b, 0x4a, 0x93,
	0x23, 0x39, 0x81, 0xdd, 0x11, 0x13, 0x6c, 0xe0, 0xb0, 0x6b, 0xf4, 0x06, 0x13, 0xe4, 0xe3, 0x89,
	0x50, 0xb7, 0xaa, 0x4a, 0x2d, 0x47, 0x8b, 0x21, 0x38, 0x0f, 0xfd, 0x67, 0xd2, 0xad, 0xbf, 0x05,
	0x62, 0x05, 0xc3, 0x29, 0x17, 0xa7, 0x8e, 0x6b, 0x5f, 0x50, 0xbc, 0x0a, 0xd0, 0x17, 0xe4, 0x18,
	0x1e, 0x0d, 0xc3, 0xb3, 0x94, 0x50, 0x68, 0x16, 0xeb, 0x2b, 0xbd, 0xd1, 0xb5, 0x88, 0xea, 0xef,
	0x60, 0x6f, 0x23, 0x38, 0xd6, 0x5f, 0x83, 0xbc, 0x87, 0x7e, 0xe0, 0x88, 0x38, 0x3c, 0xae, 0xe0,
	0xb6, 0x42, 0x1a, 0x73, 0xbd, 0x03, 0x2f, 0x8c, 0x09, 0xda, 0x17, 0x32, 0xbe, 0x35, 0x67, 0xdc,
	0x61, 0x43, 0xee, 0x70, 0x71, 0x9d, 0x08, 0xa9, 0x41, 0x7e, 0x82, 0x6c, 0x84, 0xde, 0x2a, 0xd5,
	0x4a, 0xc9, 0x99, 0xf4, 0xd3, 0x98, 0xeb, 0x57, 0xa0, 0xfd, 0x2f, 0xd5, 0x43, 0x65, 0x91, 0x63,
	0xd8, 0x91, 0x0d, 0x64, 0x51, 0x1a, 0x27, 0xea, 0xf0, 0x13, 0xba, 0x1d, 0x7a, 0x5b, 0x89, 0x53,
	0xaf, 0xc3, 0x33, 0x8a, 0xc2, 0xe3, 0x38, 0xc7, 0x8d, 0xee, 0x1d, 0x84, 0xa2, 0x65, 0xd3, 0x15,
	0xd9, 0xf4, 0xf8, 0xa4, 0x7f, 0x83, 0xfd, 0x3b, 0xf7, 0x1f, 0xac, 0xec, 0x35, 0xe4, 0x65, 0xeb,
	0x7d, 0x35, 0x5b, 0xdd, 0x4a, 0x9b, 0x4c, 0x8c, 0x4f, 0x3c, 0x80, 0xdb, 0x8d, 0x21, 0x87, 0x50,
	0xb6, 0x7a, 0xad, 0x5e, 0xdf, 0x1a, 0x18, 0xdd, 0xb6, 0x39, 0xe8, 0x7f, 0xb6, 0xbe, 0x98, 0x46,
	0xe7, 0x43, 0xc7, 0x6c, 0x97, 0x32, 0xa4, 0x0c, 0x7b, 0xeb, 0xd0, 0xea, 0x1b, 0x86, 0x69, 0x59,
	0x25, 0xe5, 0x2e, 0xe8, 0x75, 0x3e, 0x99, 0xdd, 0x7e, 0xaf, 0x94, 0x25, 0xfb, 0xb0, 0xbb, 0x0e,
	0x4c, 0x4a, 0xbb, 0xb4, 0xb4, 0xd5, 0xfc, 0x91, 0x85, 0x42, 0xbb, 0x75, 0x6e, 0x58, 0xe8, 0xcd,
	0xb9, 0x8d, 0xa4, 0x0d, 0x85, 0xb5, 0xf5, 0x20, 0x6a, 0xbc, 0xc8, 0xff, 0xac, 0x5b, 0xe5, 0x79,
	0x0a, 0x89, 0x0a, 0xd7, 0x33, 0x04, 0xe1, 0x20, 0x7d, 0xb0, 0xe4, 0x65, 0x14, 0x76, 0xef, 0x06,
	0x55, 0x8e, 0xee, 0xbf, 0xb4, 0xfa, 0xcd, 0x47, 0xd8, 0xde, 0x18, 0x0e, 0xa9, 0x44, 0x81, 0x69,
	0x13, 0xae, 0x1c, 0xa6, 0xb2, 0x24, 0xd7, 0xe9, 0xfb, 0x5f, 0x0b, 0x4d, 0xb9, 0x59, 0x68, 0xca,
	0x9f, 0x85, 0xa6, 0xfc, 0x5c, 0x6a, 0x99, 0x9b, 0xa5, 0x96, 0xf9, 0xbd, 0xd4, 0x32, 0x5f, 0x5f,
	0x8d, 0xb9, 0x98, 0x04, 0xc3, 0xba, 0xed, 0x4e, 0x1b, 0x36, 0x3a, 0xe8, 0x0b, 0xce, 0x5c, 0x6f,
	0x2c, 0x9f, 0x8a, 0x86, 0x7c, 0x0b, 0xa4, 0x39, 0xcc, 0x4b, 0xfb, 0xcd, 0xdf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xb9, 0x2a, 0xd8, 0x96, 0x49, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DALCServiceClient is the client API for DALCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DALCServiceClient interface {
	SubmitBlock(ctx context.Context, in *SubmitBlockRequest, opts ...grpc.CallOption) (*SubmitBlockResponse, error)
	CheckBlockAvailability(ctx context.Context, in *CheckBlockAvailabilityRequest, opts ...grpc.CallOption) (*CheckBlockAvailabilityResponse, error)
	RetrieveBlock(ctx context.Context, in *RetrieveBlockRequest, opts ...grpc.CallOption) (*RetrieveBlockResponse, error)
}

type dALCServiceClient struct {
	cc *grpc.ClientConn
}

func NewDALCServiceClient(cc *grpc.ClientConn) DALCServiceClient {
	return &dALCServiceClient{cc}
}

func (c *dALCServiceClient) SubmitBlock(ctx context.Context, in *SubmitBlockRequest, opts ...grpc.CallOption) (*SubmitBlockResponse, error) {
	out := new(SubmitBlockResponse)
	err := c.cc.Invoke(ctx, "/dalc.DALCService/SubmitBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dALCServiceClient) CheckBlockAvailability(ctx context.Context, in *CheckBlockAvailabilityRequest, opts ...grpc.CallOption) (*CheckBlockAvailabilityResponse, error) {
	out := new(CheckBlockAvailabilityResponse)
	err := c.cc.Invoke(ctx, "/dalc.DALCService/CheckBlockAvailability", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dALCServiceClient) RetrieveBlock(ctx context.Context, in *RetrieveBlockRequest, opts ...grpc.CallOption) (*RetrieveBlockResponse, error) {
	out := new(RetrieveBlockResponse)
	err := c.cc.Invoke(ctx, "/dalc.DALCService/RetrieveBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DALCServiceServer is the server API for DALCService service.
type DALCServiceServer interface {
	SubmitBlock(context.Context, *SubmitBlockRequest) (*SubmitBlockResponse, error)
	CheckBlockAvailability(context.Context, *CheckBlockAvailabilityRequest) (*CheckBlockAvailabilityResponse, error)
	RetrieveBlock(context.Context, *RetrieveBlockRequest) (*RetrieveBlockResponse, error)
}

// UnimplementedDALCServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDALCServiceServer struct {
}

func (*UnimplementedDALCServiceServer) SubmitBlock(ctx context.Context, req *SubmitBlockRequest) (*SubmitBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitBlock not implemented")
}
func (*UnimplementedDALCServiceServer) CheckBlockAvailability(ctx context.Context, req *CheckBlockAvailabilityRequest) (*CheckBlockAvailabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckBlockAvailability not implemented")
}
func (*UnimplementedDALCServiceServer) RetrieveBlock(ctx context.Context, req *RetrieveBlockRequest) (*RetrieveBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveBlock not implemented")
}

func RegisterDALCServiceServer(s *grpc.Server, srv DALCServiceServer) {
	s.RegisterService(&_DALCService_serviceDesc, srv)
}

func _DALCService_SubmitBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DALCServiceServer).SubmitBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dalc.DALCService/SubmitBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DALCServiceServer).SubmitBlock(ctx, req.(*SubmitBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DALCService_CheckBlockAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckBlockAvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DALCServiceServer).CheckBlockAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dalc.DALCService/CheckBlockAvailability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DALCServiceServer).CheckBlockAvailability(ctx, req.(*CheckBlockAvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DALCService_RetrieveBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DALCServiceServer).RetrieveBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dalc.DALCService/RetrieveBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DALCServiceServer).RetrieveBlock(ctx, req.(*RetrieveBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DALCService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dalc.DALCService",
	HandlerType: (*DALCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitBlock",
			Handler:    _DALCService_SubmitBlock_Handler,
		},
		{
			MethodName: "CheckBlockAvailability",
			Handler:    _DALCService_CheckBlockAvailability_Handler,
		},
		{
			MethodName: "RetrieveBlock",
			Handler:    _DALCService_RetrieveBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dalc/dalc.proto",
}

func (m *DAResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DAResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DAResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DataLayerHeight != 0 {
		i = encodeVarintDalc(dAtA, i, uint64(m.DataLayerHeight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintDalc(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintDalc(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SubmitBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubmitBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubmitBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Block != nil {
		{
			size, err := m.Block.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDalc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubmitBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubmitBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubmitBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDalc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CheckBlockAvailabilityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckBlockAvailabilityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckBlockAvailabilityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDalc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CheckBlockAvailabilityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckBlockAvailabilityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckBlockAvailabilityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DataAvailable {
		i--
		if m.DataAvailable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDalc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintDalc(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Blocks) > 0 {
		for iNdEx := len(m.Blocks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Blocks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDalc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDalc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDalc(dAtA []byte, offset int, v uint64) int {
	offset -= sovDalc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DAResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovDalc(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovDalc(uint64(l))
	}
	if m.DataLayerHeight != 0 {
		n += 1 + sovDalc(uint64(m.DataLayerHeight))
	}
	return n
}

func (m *SubmitBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Block != nil {
		l = m.Block.Size()
		n += 1 + l + sovDalc(uint64(l))
	}
	return n
}

func (m *SubmitBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovDalc(uint64(l))
	}
	return n
}

func (m *CheckBlockAvailabilityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovDalc(uint64(l))
	}
	return n
}

func (m *CheckBlockAvailabilityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovDalc(uint64(l))
	}
	if m.DataAvailable {
		n += 2
	}
	return n
}

func (m *RetrieveBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovDalc(uint64(m.Height))
	}
	return n
}

func (m *RetrieveBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovDalc(uint64(l))
	}
	if len(m.Blocks) > 0 {
		for _, e := range m.Blocks {
			l = e.Size()
			n += 1 + l + sovDalc(uint64(l))
		}
	}
	return n
}

func sovDalc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDalc(x uint64) (n int) {
	return sovDalc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DAResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDalc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DAResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DAResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDalc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= StatusCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDalc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDalc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDalc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataLayerHeight", wireType)
			}
			m.DataLayerHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDalc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataLayerHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDalc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDalc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubmitBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDalc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDalc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDalc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDalc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Block == nil {
				m.Block = &optimint.Block{}
			}
			if err := m.Block.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDalc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDalc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubmitBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDalc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDalc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDalc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDalc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &DAResponse{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDalc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDalc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckBlockAvailabilityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDalc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckBlockAvailabilityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckBlockAvailabilityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDalc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDalc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDalc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &optimint.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDalc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDalc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckBlockAvailabilityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDalc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckBlockAvailabilityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckBlockAvailabilityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDalc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDalc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDalc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &DAResponse{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataAvailable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDalc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DataAvailable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDalc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDalc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDalc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDalc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDalc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDalc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDalc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDalc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDalc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDalc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &DAResponse{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDalc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDalc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDalc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocks = append(m.Blocks, &optimint.Block{})
			if err := m.Blocks[len(m.Blocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDalc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDalc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDalc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDalc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDalc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDalc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDalc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDalc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDalc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDalc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDalc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDalc = fmt.Errorf("proto: unexpected end of group")
)
